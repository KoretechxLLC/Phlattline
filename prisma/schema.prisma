generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_types {
  id        Int     @id @default(autoincrement())
  type_name String  @db.VarChar(50)
  users     users[]
}

model users {
  id                        Int                         @id @default(autoincrement())
  user_type_id              Int
  email                     String                      @unique @db.VarChar(255)
  phone_number              String?                     @db.VarChar(20)
  password                  String?                     @db.VarChar(255)
  first_name                String?                     @db.VarChar(100)
  last_name                 String?                     @db.VarChar(100)
  designation               String?                     @db.VarChar(100)
  date_of_birth             DateTime?                   @db.Date
  provider                  String?                     @default("app") @db.VarChar(50)
  status                    String?                     @default("pending") @db.VarChar(20)
  created_at                DateTime?                   @default(now()) @db.Timestamp(6)
  isLoggedIn                Boolean                     @default(false)
  logout_at                 DateTime?                   @default(now()) @db.Timestamptz(6)
  organization_id           Int?
  app_provider              String                      @default("App")
  profile_image             String?                     @db.VarChar(255)
  assessment_status         Boolean                     @default(false)
  categoryId                Int?
  subCategoryId             Int?
  employee_id               Int?
  timeLogs                  TimeLog[]
  assignedAssessment        assignedAssessment[]
  assignedCourses           assignedCourses[]
  jobApplication            jobApplication[]
  purchased_assessments     purchased_assessments[]
  trainingOnDemand          trainingOnDemand[]
  user_assessment_responses user_assessment_responses[]
  user_courses              user_courses[]
  user_goals                user_goal[]
  user_video_progress       user_video_progress[]
  employees                 employees?                  @relation(fields: [employee_id], references: [id])
  organizations             organizations?              @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  user_types                user_types                  @relation(fields: [user_type_id], references: [id], onDelete: NoAction)
  interviewSchedule         interviewSchedule[]
  workShop                  workShop[]
  enrolledUserWorkshop      enrolledUserWorkshop[]
}

model organizations {
  id                  Int                  @id @default(autoincrement())
  organization_name   String               @db.VarChar(255)
  organization_code   String               @unique @db.VarChar(255)
  email               String               @unique @db.VarChar(255)
  phone_number        String               @db.VarChar(50)
  created_at          DateTime             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime             @updatedAt
  categoryId          Int
  no_of_employees     Int
  assignedAssessment  assignedAssessment[]
  assignedCourses     assignedCourses[]
  department          department[]
  employee_review     employee_review[]
  employees           employees[]
  leaderFeedback      leaderFeedback[]
  resignation         resignation[]
  talent              talent[]
  users               users[]
  interviewSchedule   interviewSchedule[]
  assessment_category assessment_category  @relation(fields: [categoryId], references: [id])
}

model employees {
  id                Int            @id @default(autoincrement())
  first_name        String         @db.VarChar(225)
  last_name         String         @db.VarChar(225)
  email             String         @unique @db.VarChar(225)
  phone_number      String         @db.VarChar(50)
  organization_code String         @db.VarChar(255)
  organization_id   Int
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @updatedAt
  gender            EmployeeGender
  departmentId      Int?
  date_of_birth     DateTime?      @db.Date
  designation       String?        @db.VarChar(100)
  profile_image     String?        @db.VarChar(255)
  left              Boolean        @default(false)
  status            String         @default("pending") @db.VarChar(20)

  assignedAssessment assignedAssessment[]
  assignedCourses    assignedCourses[]
  employee_review    employee_review[]
  department         department?          @relation(fields: [departmentId], references: [id])
  organization       organizations        @relation(fields: [organization_id], references: [id])
  leaderFeedback     leaderFeedback[]
  users              users[]
  resignation        resignation[]
}

model interviewSchedule {
  id                Int           @id @default(autoincrement())
  interview_date    DateTime      @db.Timestamptz(6)
  interview_time    String
  organization_id   Int
  candidate_user_id Int
  message           String
  created_at        DateTime      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime      @updatedAt
  users             users         @relation(fields: [candidate_user_id], references: [id])
  organization      organizations @relation(fields: [organization_id], references: [id])
}

model resignation {
  id              Int                @id @default(autoincrement())
  employee_id     Int
  organization_id Int
  reason          String
  created_at      DateTime           @default(now()) @db.Timestamptz(6)
  updated_at      DateTime           @updatedAt
  status          resignation_status @default(pending)
  employees       employees          @relation(fields: [employee_id], references: [id])
  organization    organizations      @relation(fields: [organization_id], references: [id])
}

model department {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(225)
  department_size Int
  organization_id Int
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @updatedAt
  organization    organizations    @relation(fields: [organization_id], references: [id])
  employees       employees[]
  leaderFeedback  leaderFeedback[]
  talent          talent[]
}

model leaderFeedback {
  id              Int           @id @default(autoincrement())
  employee_id     Int
  feedback        String
  organization_id Int
  department_id   Int
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @updatedAt
  department      department    @relation(fields: [department_id], references: [id])
  employees       employees     @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  organizations   organizations @relation(fields: [organization_id], references: [id])
}

model courses {
  id                        Int                         @id @default(autoincrement())
  course_name               String                      @db.VarChar(255)
  description               String?
  price                     Float
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @default(now()) @updatedAt
  categoryId                Int
  subCategoryId             Int
  options                   String?
  course_for                Int?
  CoursesAssessmentResponse CoursesAssessmentResponse[]
  VideoProgress             VideoProgress[]
  assessments               assessments[]
  assignedCourses           assignedCourses[]
  user_courses              user_courses[]
  user_video_progress       user_video_progress[]
  videos                    videos[]
}

model assignedCourses {
  id              Int           @id @default(autoincrement())
  user_id         Int
  organization_id Int
  employee_id     Int
  course_id       Int
  assigned_at     DateTime      @default(now()) @db.Timestamp(6)
  status          course_status @default(notStarted)
  courses         courses       @relation(fields: [course_id], references: [id], onDelete: Cascade)
  employees       employees     @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model assignedAssessment {
  id                       Int                    @id @default(autoincrement())
  user_id                  Int
  organization_id          Int
  employee_id              Int
  individual_assessment_id Int
  assigned_at              DateTime               @default(now()) @db.Timestamp(6)
  status                   course_status          @default(notStarted)
  employees                employees              @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  individual_assessments   individual_assessments @relation(fields: [individual_assessment_id], references: [id])
  organizations            organizations          @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users                    users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model videos {
  id                  Int                   @id @default(autoincrement())
  video_url           String                @db.VarChar(255)
  sequence            Int
  title               String?               @db.VarChar(255)
  description         String?
  thumbnail_url       String?               @db.VarChar(255)
  course_id           Int
  courses             courses               @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_video_progress user_video_progress[] @relation("user_video_progressTovideos")
}

model assessments {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(255)
  course_id Int
  courses   courses     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  questions questions[]
}

model questions {
  id                        Int                         @id @default(autoincrement())
  question_text             String                      @db.VarChar(255)
  answer_options            String[]
  correct_answer            String                      @db.VarChar(255)
  assessment_id             Int
  CoursesAssessmentResponse CoursesAssessmentResponse[]
  assessments               assessments                 @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
}

model purchased_assessments {
  id                        Int                    @id @default(autoincrement())
  user_id                   Int
  individual_assessments_id Int
  title                     String                 @db.VarChar(255)
  completed                 Boolean                @default(false)
  purchasedAt               DateTime               @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime               @updatedAt
  individual_assessments    individual_assessments @relation(fields: [individual_assessments_id], references: [id])
  users                     users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model assessmentform_responses {
  id                     Int                     @id @default(autoincrement())
  assessment_id          Int?
  question_id            Int?
  selected_option_id     Int?
  feel_worth_it          String                  @db.VarChar(255)
  submitted_at           DateTime?               @default(now()) @db.Timestamp(6)
  assessmentsform        assessmentsform?        @relation(fields: [assessment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assessmentsquestions   assessmentsquestions?   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assessmentsformoptions assessmentsformoptions? @relation(fields: [selected_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model assessmentsform {
  id                       Int                        @id @default(autoincrement())
  type                     String                     @db.VarChar(255)
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  assessmentform_responses assessmentform_responses[]
  assessmentsquestions     assessmentsquestions[]     @relation("FormQuestions")
}

model assessmentsformoptions {
  id                       Int                        @id @default(autoincrement())
  question_id              Int?
  option_text              String                     @db.VarChar(255)
  assessmentform_responses assessmentform_responses[]
  assessmentsquestions     assessmentsquestions?      @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model assessmentsquestions {
  id                       Int                        @id @default(autoincrement())
  assessment_id            Int?
  question_text            String                     @db.VarChar(255)
  category                 Category                   @default(individual)
  assessmentform_responses assessmentform_responses[]
  assessmentsformoptions   assessmentsformoptions[]
  assessmentsform          assessmentsform?           @relation("FormQuestions", fields: [assessment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category])
}

model individual_assessment_questions {
  id                            Int                             @id @default(autoincrement())
  question_text                 String                          @db.VarChar(255)
  individual_assessment_id      Int
  individual_assessment_options individual_assessment_options[]
  individual_assessment         individual_assessments          @relation(fields: [individual_assessment_id], references: [id], onDelete: Cascade)
  user_assessment_responses     user_assessment_responses[]
}

model individual_assessment_options {
  id                                Int                             @id @default(autoincrement())
  option_text                       String                          @db.VarChar(255)
  is_correct                        Boolean                         @default(false)
  percentage                        Int
  individual_assessment_question_id Int
  individual_assessment_questions   individual_assessment_questions @relation(fields: [individual_assessment_question_id], references: [id], onDelete: Cascade)
}

model user_assessment_responses {
  id              Int                             @id @default(autoincrement())
  user_id         Int
  assessment_id   Int
  question_id     Int
  selected_option String                          @db.VarChar(255)
  created_at      DateTime?                       @default(now()) @db.Timestamp(6)
  assessment      individual_assessments          @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  question        individual_assessment_questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user            users                           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model talent {
  id                   Int              @id @default(autoincrement())
  department_id        Int
  position_name        String
  description          String
  created_at           DateTime         @default(now()) @db.Timestamp(6)
  updatedAt            DateTime         @updatedAt
  organization_id      Int
  key_responsibilities String[]
  qualification        String[]
  jobApplication       jobApplication[]
  department           department       @relation(fields: [department_id], references: [id], onDelete: Cascade)
  organizations        organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model jobApplication {
  id        Int     @id @default(autoincrement())
  user_id   Int
  talent_id Int
  message   String
  cv        String
  scheduled Boolean @default(false)
  talent    talent  @relation(fields: [talent_id], references: [id])
  users     users   @relation(fields: [user_id], references: [id])
}

model user_goal {
  id              Int      @id @default(autoincrement())
  goal_name       String   @db.VarChar(255)
  start_date      DateTime @db.Date
  completion_date DateTime @db.Date
  goal_type       GoalType @default(Personal)
  description     String?
  user_id         Int
  status          Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  goal_tasks      Json
  assignee_id     Int[]
  user            users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_video_progress {
  id            Int             @id @default(autoincrement())
  user_id       Int
  assessment    Boolean         @default(false)
  course_id     Int?
  updated_at    DateTime        @default(now()) @db.Timestamptz(6)
  videoProgress VideoProgress[]
  courses       courses?        @relation(fields: [course_id], references: [id], onDelete: Cascade)
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  videos        videos[]        @relation("user_video_progressTovideos")
}

model VideoProgress {
  id                     Int                 @id @default(autoincrement())
  video_id               String
  progressDuration       Float
  totalDuration          Float
  completed              Boolean             @default(false)
  course_id              Int?
  updated_at             DateTime            @default(now()) @db.Timestamptz(6)
  user_video_progress_id Int
  courses                courses?            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_video_progress    user_video_progress @relation(fields: [user_video_progress_id], references: [id], onDelete: Cascade)
}

model CoursesAssessmentResponse {
  id         Int       @id @default(autoincrement())
  courseId   Int
  questionId Int
  answer     String
  createdAt  DateTime  @default(now())
  userId     Int?
  status     Boolean   @default(false)
  course     courses   @relation(fields: [courseId], references: [id])
  question   questions @relation(fields: [questionId], references: [id])
}

model TimeLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  timeSpent Int
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model individual_assessments {
  id                              Int                               @id @default(autoincrement())
  title                           String                            @db.VarChar(255)
  created_at                      DateTime?                         @default(now()) @db.Timestamp(6)
  price                           Int
  image                           String
  categoryId                      Int
  subCategoryId                   Int
  assessment_for                  assessment_for?                   @default(individual)
  assignedAssessment              assignedAssessment[]
  individual_assessment_questions individual_assessment_questions[]
  assessment_category             assessment_category               @relation(fields: [categoryId], references: [id])
  assessment_subCategory          assessment_subCategory            @relation(fields: [subCategoryId], references: [id])
  purchased_assessments           purchased_assessments[]
  user_assessment_responses       user_assessment_responses[]
}

model assessment_category {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @unique
  createdAt                DateTime                 @default(now())
  assessment_subCategories assessment_subCategory[]
  individual_assessments   individual_assessments[]
  organizations            organizations[]
}

model assessment_subCategory {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique
  createdAt              DateTime                 @default(now())
  category_id            Int
  category               assessment_category      @relation(fields: [category_id], references: [id])
  individual_assessments individual_assessments[]
}

model trainingOnDemand {
  id          Int      @id @default(autoincrement())
  user_id     Int
  created_at  DateTime @default(now())
  matter_name String
  select_date DateTime
  select_time String
  users       users    @relation(fields: [user_id], references: [id])
}

model user_courses {
  id          Int           @id @default(autoincrement())
  user_id     Int
  course_id   Int
  status      course_status @default(notStarted)
  purchasedAt DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt
  courses     courses       @relation(fields: [course_id], references: [id], onDelete: Cascade)
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model employee_review {
  id              Int           @id @default(autoincrement())
  employee_id     Int
  review          String
  no_of_stars     Int
  organization_id Int
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @updatedAt
  employees       employees     @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  organizations   organizations @relation(fields: [organization_id], references: [id])
}

model workShop {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  Date                 String
  start_time           String
  end_time             String
  userId               Int
  Objective            String[]
  users                users                  @relation(fields: [userId], references: [id])
  image                String
  videoUrl             String?
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @updatedAt
  enrolledUserWorkshop enrolledUserWorkshop[]
}

model enrolledUserWorkshop {
  id         Int      @id @default(autoincrement())
  userId     Int
  workshopId Int
  users      users    @relation(fields: [userId], references: [id])
  workShop   workShop @relation(fields: [workshopId], references: [id])
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt
}

enum resignation_status {
  pending
  rejected
  accepted
}

enum assessment_for {
  individual
  organization
  team
}

enum course_status {
  inprogress
  notStarted
  completed
}

enum Category {
  individual
  organization
}

enum GoalType {
  Personal
  Performance
  Professional
}

enum EmployeeGender {
  Male
  Female
}
