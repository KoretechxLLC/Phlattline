generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_types {
  id        Int     @id @default(autoincrement())
  type_name String  @db.VarChar(50)
  users     users[]
}

model users {
  id                 Int                  @id @default(autoincrement())
  user_type_id       Int
  email              String               @unique @db.VarChar(255)
  phone_number       String?               @db.VarChar(20)
  password           String?               @db.VarChar(255)
  first_name         String?              @db.VarChar(100)
  last_name          String?              @db.VarChar(100)
  designation        String?              @db.VarChar(100)
  date_of_birth      DateTime?            @db.Date
  provider           String?              @default("app") @db.VarChar(50)
  status             String?              @default("pending") @db.VarChar(20)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  isLoggedIn         Boolean              @default(false)
  logout_at          DateTime?            @default(now()) @db.Timestamptz(6)       
  organization_id    Int?
  app_provider       String               @default("App")
  profile_image      String?              @db.VarChar(255)
  assessment_status  Boolean    @default(false) 
  course_assignments  course_assignments[]
  user_courses       user_courses[]
  organizations      organizations?       @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  user_types         user_types           @relation(fields: [user_type_id], references: [id], onDelete: NoAction)
  user_assessment_responses user_assessment_responses[] 
}

model organizations {
  id                 Int                  @id @default(autoincrement())
  organization_name  String               @db.VarChar(255)
  organization_code  String               @unique @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  phone_number       String               @db.VarChar(50)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  description        String?
  course_assignments  course_assignments[]
  users              users[]
}

model courses {
  id                 Int                  @id @default(autoincrement())
  course_name        String               @db.VarChar(255)
  description        String?
  assessments        assessments[]
  course_assignments  course_assignments[]
  user_courses       user_courses[]
  videos             videos[]
}

model videos {
  id            Int     @id @default(autoincrement())
  video_url     String  @db.VarChar(255)
  sequence      Int
  title         String? @db.VarChar(255)
  description   String?
  thumbnail_url String? @db.VarChar(255)
  course_id     Int
  courses       courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model assessments {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(255)
  course_id Int
  courses   courses     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  questions questions[]
}

model questions {
  id             Int         @id @default(autoincrement())
  question_text  String      @db.VarChar(255)
  answer_options String[]
  correct_answer String      @db.VarChar(255)
  assessment_id  Int
  assessments    assessments @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
}

model user_courses {
  id        Int     @id @default(autoincrement())
  user_id   Int
  course_id Int
  status    String  @db.VarChar(20)
  progress  Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model course_assignments {
  id              Int            @id @default(autoincrement())
  user_id         Int
  course_id       Int
  assigned_by     Int?
  organization_id Int?
  courses         courses        @relation(fields: [course_id], references: [id], onDelete: Cascade)
  organization    organizations? @relation(fields: [organization_id], references: [id])
  users           users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model assessmentform_responses {
  id                     Int                     @id @default(autoincrement())
  assessment_id          Int?
  question_id            Int?
  selected_option_id     Int?
  feel_worth_it          String                  @db.VarChar(255)
  submitted_at           DateTime?               @default(now()) @db.Timestamp(6)
  assessmentsform        assessmentsform?        @relation(fields: [assessment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assessmentsquestions   assessmentsquestions?   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assessmentsformoptions assessmentsformoptions? @relation(fields: [selected_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model assessmentsform {
  id                       Int                        @id @default(autoincrement())
  type                     String                     @db.VarChar(255)
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  assessmentform_responses assessmentform_responses[]
  assessmentsquestions     assessmentsquestions[]      @relation("FormQuestions")  // Define relation name
}

model assessmentsformoptions {
  id                       Int                        @id @default(autoincrement())
  question_id              Int?
  option_text              String                     @db.VarChar(255)
  assessmentform_responses assessmentform_responses[]
  assessmentsquestions     assessmentsquestions?      @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model assessmentsquestions {
  id                       Int                        @id @default(autoincrement())
  assessment_id            Int?
  question_text            String                     @db.VarChar(255)
  category                 Category                   @default(individual)
  assessmentform_responses assessmentform_responses[]
  assessmentsformoptions   assessmentsformoptions[]
  assessmentsform          assessmentsform?           @relation("FormQuestions", fields: [assessment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([category])      // Add index to optimize querying by category
}

enum Category {
  individual
  organization
}

model individual_assessments {
  id                         Int                          @id @default(autoincrement())
  title                      String                       @db.VarChar(255)
  created_at                 DateTime?                    @default(now()) @db.Timestamp(6)
  individual_assessment_questions individual_assessment_questions[]
  user_assessment_responses   user_assessment_responses[]   // Add this line
}

model individual_assessment_questions {
  id                          Int                          @id @default(autoincrement())
  question_text               String                       @db.VarChar(255)
  individual_assessment_id     Int
  individual_assessment        individual_assessments       @relation(fields: [individual_assessment_id], references: [id], onDelete: Cascade)
  individual_assessment_options individual_assessment_options[]
  user_assessment_responses    user_assessment_responses[]   // Add this line
}

model individual_assessment_options {
  id                          Int                          @id @default(autoincrement())
  option_text                 String                       @db.VarChar(255)
  is_correct                  Boolean                      @default(false)
  individual_assessment_question_id Int
  individual_assessment_questions   individual_assessment_questions @relation(fields: [individual_assessment_question_id], references: [id], onDelete: Cascade)
}

model user_assessment_responses {
  id                      Int                             @id @default(autoincrement())
  user_id                 Int
  assessment_id           Int
  question_id             Int
  selected_option         String                          @db.VarChar(255)
  created_at              DateTime?                       @default(now()) @db.Timestamp(6)
  user                     users                          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assessment              individual_assessments          @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  question                individual_assessment_questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
}