generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_types {
  id        Int     @id @default(autoincrement())
  type_name String  @db.VarChar(50)
  users     users[]
}

model users {
  id                 Int                  @id @default(autoincrement())
  user_type_id       Int
  email              String               @unique @db.VarChar(255)
  phone_number       String               @db.VarChar(20)
  password           String               @db.VarChar(255)
  first_name         String?              @db.VarChar(100)
  last_name          String?              @db.VarChar(100)
  designation        String?              @db.VarChar(100)
  date_of_birth      DateTime?            @db.Date
  provider           String?              @default("app") @db.VarChar(50)
  status             String?              @default("active") @db.VarChar(20)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  organization_id    Int?
  profile_image      String?              @db.VarChar(255)
  course_assignments course_assignments[]
  user_courses       user_courses[]
  organizations      organizations?       @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  user_types         user_types           @relation(fields: [user_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organizations {
  id                 Int                  @id @default(autoincrement())
  organization_name  String               @db.VarChar(255)
  organization_code  String               @unique @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  phone_number       String               @db.VarChar(50)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  description        String?
  course_assignments course_assignments[]
  users              users[]
}

model courses {
  id                 Int                  @id @default(autoincrement())
  course_name        String               @db.VarChar(255)
  description        String?
  assessments        assessments[]
  course_assignments course_assignments[]
  user_courses       user_courses[]
  videos             videos[]
}

model videos {
  id            Int     @id @default(autoincrement())
  video_url     String  @db.VarChar(255)
  sequence      Int
  title         String? @db.VarChar(255)
  description   String?
  thumbnail_url String? @db.VarChar(255)
  course_id     Int
  courses       courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model assessments {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(255)
  course_id Int
  courses   courses     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  questions questions[]
}

model questions {
  id             Int         @id @default(autoincrement())
  question_text  String      @db.VarChar(255)
  answer_options String[]
  correct_answer String      @db.VarChar(255)
  assessment_id  Int
  assessments    assessments @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
}

model user_courses {
  id        Int     @id @default(autoincrement())
  user_id   Int
  course_id Int
  status    String  @db.VarChar(20)
  progress  Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model course_assignments {
  id              Int            @id @default(autoincrement())
  user_id         Int
  course_id       Int
  assigned_by     Int?
  organization_id Int?
  courses         courses        @relation(fields: [course_id], references: [id], onDelete: Cascade)
  organization    organizations? @relation(fields: [organization_id], references: [id])
  users           users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
